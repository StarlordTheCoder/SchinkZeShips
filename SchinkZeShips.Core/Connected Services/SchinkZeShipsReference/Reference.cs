//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchinkZeShips.Core.SchinkZeShipsReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/SchinkZeShips.Server")]
    public partial class Game : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SchinkZeShips.Core.SchinkZeShipsReference.Player GameCreatorField;
        
        private SchinkZeShips.Core.SchinkZeShipsReference.Player GameParticipantField;
        
        private string IdField;
        
        private string NameField;
        
        private SchinkZeShips.Core.SchinkZeShipsReference.GameState RunningGameStateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SchinkZeShips.Core.SchinkZeShipsReference.Player GameCreator {
            get {
                return this.GameCreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.GameCreatorField, value) != true)) {
                    this.GameCreatorField = value;
                    this.RaisePropertyChanged("GameCreator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SchinkZeShips.Core.SchinkZeShipsReference.Player GameParticipant {
            get {
                return this.GameParticipantField;
            }
            set {
                if ((object.ReferenceEquals(this.GameParticipantField, value) != true)) {
                    this.GameParticipantField = value;
                    this.RaisePropertyChanged("GameParticipant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SchinkZeShips.Core.SchinkZeShipsReference.GameState RunningGameState {
            get {
                return this.RunningGameStateField;
            }
            set {
                if ((object.ReferenceEquals(this.RunningGameStateField, value) != true)) {
                    this.RunningGameStateField = value;
                    this.RaisePropertyChanged("RunningGameState");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/SchinkZeShips.Server")]
    public partial class Player : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IdField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameState", Namespace="http://schemas.datacontract.org/2004/07/SchinkZeShips.Server")]
    public partial class GameState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool CurrentPlayerIsGameCreatorField;
        
        private SchinkZeShips.Core.SchinkZeShipsReference.PlayingFieldState PlayingFieldCreatorField;
        
        private SchinkZeShips.Core.SchinkZeShipsReference.PlayingFieldState PlayingFieldParticipantField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CurrentPlayerIsGameCreator {
            get {
                return this.CurrentPlayerIsGameCreatorField;
            }
            set {
                if ((this.CurrentPlayerIsGameCreatorField.Equals(value) != true)) {
                    this.CurrentPlayerIsGameCreatorField = value;
                    this.RaisePropertyChanged("CurrentPlayerIsGameCreator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SchinkZeShips.Core.SchinkZeShipsReference.PlayingFieldState PlayingFieldCreator {
            get {
                return this.PlayingFieldCreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayingFieldCreatorField, value) != true)) {
                    this.PlayingFieldCreatorField = value;
                    this.RaisePropertyChanged("PlayingFieldCreator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SchinkZeShips.Core.SchinkZeShipsReference.PlayingFieldState PlayingFieldParticipant {
            get {
                return this.PlayingFieldParticipantField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayingFieldParticipantField, value) != true)) {
                    this.PlayingFieldParticipantField = value;
                    this.RaisePropertyChanged("PlayingFieldParticipant");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayingFieldState", Namespace="http://schemas.datacontract.org/2004/07/SchinkZeShips.Server")]
    public partial class PlayingFieldState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.CellState>> CellsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.CellState>> Cells {
            get {
                return this.CellsField;
            }
            set {
                if ((object.ReferenceEquals(this.CellsField, value) != true)) {
                    this.CellsField = value;
                    this.RaisePropertyChanged("Cells");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CellState", Namespace="http://schemas.datacontract.org/2004/07/SchinkZeShips.Server")]
    public partial class CellState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool HasShipField;
        
        private bool WasShotField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasShip {
            get {
                return this.HasShipField;
            }
            set {
                if ((this.HasShipField.Equals(value) != true)) {
                    this.HasShipField = value;
                    this.RaisePropertyChanged("HasShip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WasShot {
            get {
                return this.WasShotField;
            }
            set {
                if ((this.WasShotField.Equals(value) != true)) {
                    this.WasShotField = value;
                    this.RaisePropertyChanged("WasShot");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SchinkZeShipsReference.ISchinkZeShips")]
    public interface ISchinkZeShips {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchinkZeShips/GetAllOpenGames", ReplyAction="http://tempuri.org/ISchinkZeShips/GetAllOpenGamesResponse")]
        System.IAsyncResult BeginGetAllOpenGames(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game> EndGetAllOpenGames(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchinkZeShips/CreateGame", ReplyAction="http://tempuri.org/ISchinkZeShips/CreateGameResponse")]
        System.IAsyncResult BeginCreateGame(SchinkZeShips.Core.SchinkZeShipsReference.Player creator, string gameName, System.AsyncCallback callback, object asyncState);
        
        SchinkZeShips.Core.SchinkZeShipsReference.Game EndCreateGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchinkZeShips/GetCurrentGame", ReplyAction="http://tempuri.org/ISchinkZeShips/GetCurrentGameResponse")]
        System.IAsyncResult BeginGetCurrentGame(string playerId, System.AsyncCallback callback, object asyncState);
        
        SchinkZeShips.Core.SchinkZeShipsReference.Game EndGetCurrentGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchinkZeShips/JoinGame", ReplyAction="http://tempuri.org/ISchinkZeShips/JoinGameResponse")]
        System.IAsyncResult BeginJoinGame(string gameIdToJoin, SchinkZeShips.Core.SchinkZeShipsReference.Player player, System.AsyncCallback callback, object asyncState);
        
        void EndJoinGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchinkZeShips/RemoveFromGame", ReplyAction="http://tempuri.org/ISchinkZeShips/RemoveFromGameResponse")]
        System.IAsyncResult BeginRemoveFromGame(string gameId, string playerId, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveFromGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchinkZeShips/UpdateGameState", ReplyAction="http://tempuri.org/ISchinkZeShips/UpdateGameStateResponse")]
        System.IAsyncResult BeginUpdateGameState(string gameId, SchinkZeShips.Core.SchinkZeShipsReference.GameState gameState, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateGameState(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISchinkZeShipsChannel : SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllOpenGamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllOpenGamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchinkZeShips.Core.SchinkZeShipsReference.Game Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SchinkZeShips.Core.SchinkZeShipsReference.Game)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchinkZeShips.Core.SchinkZeShipsReference.Game Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SchinkZeShips.Core.SchinkZeShipsReference.Game)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SchinkZeShipsClient : System.ServiceModel.ClientBase<SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips>, SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips {
        
        private BeginOperationDelegate onBeginGetAllOpenGamesDelegate;
        
        private EndOperationDelegate onEndGetAllOpenGamesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllOpenGamesCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateGameDelegate;
        
        private EndOperationDelegate onEndCreateGameDelegate;
        
        private System.Threading.SendOrPostCallback onCreateGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentGameDelegate;
        
        private EndOperationDelegate onEndGetCurrentGameDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginJoinGameDelegate;
        
        private EndOperationDelegate onEndJoinGameDelegate;
        
        private System.Threading.SendOrPostCallback onJoinGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveFromGameDelegate;
        
        private EndOperationDelegate onEndRemoveFromGameDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveFromGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateGameStateDelegate;
        
        private EndOperationDelegate onEndUpdateGameStateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateGameStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SchinkZeShipsClient(EndpointConfiguration endpointConfiguration) : 
                base(SchinkZeShipsClient.GetBindingForEndpoint(endpointConfiguration), SchinkZeShipsClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public SchinkZeShipsClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SchinkZeShipsClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public SchinkZeShipsClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SchinkZeShipsClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public SchinkZeShipsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAllOpenGamesCompletedEventArgs> GetAllOpenGamesCompleted;
        
        public event System.EventHandler<CreateGameCompletedEventArgs> CreateGameCompleted;
        
        public event System.EventHandler<GetCurrentGameCompletedEventArgs> GetCurrentGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> JoinGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveFromGameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateGameStateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.BeginGetAllOpenGames(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllOpenGames(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game> SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.EndGetAllOpenGames(System.IAsyncResult result) {
            return base.Channel.EndGetAllOpenGames(result);
        }
        
        private System.IAsyncResult OnBeginGetAllOpenGames(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).BeginGetAllOpenGames(callback, asyncState);
        }
        
        private object[] OnEndGetAllOpenGames(System.IAsyncResult result) {
            System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game> retVal = ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).EndGetAllOpenGames(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllOpenGamesCompleted(object state) {
            if ((this.GetAllOpenGamesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllOpenGamesCompleted(this, new GetAllOpenGamesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllOpenGamesAsync() {
            this.GetAllOpenGamesAsync(null);
        }
        
        public void GetAllOpenGamesAsync(object userState) {
            if ((this.onBeginGetAllOpenGamesDelegate == null)) {
                this.onBeginGetAllOpenGamesDelegate = new BeginOperationDelegate(this.OnBeginGetAllOpenGames);
            }
            if ((this.onEndGetAllOpenGamesDelegate == null)) {
                this.onEndGetAllOpenGamesDelegate = new EndOperationDelegate(this.OnEndGetAllOpenGames);
            }
            if ((this.onGetAllOpenGamesCompletedDelegate == null)) {
                this.onGetAllOpenGamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllOpenGamesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllOpenGamesDelegate, null, this.onEndGetAllOpenGamesDelegate, this.onGetAllOpenGamesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.BeginCreateGame(SchinkZeShips.Core.SchinkZeShipsReference.Player creator, string gameName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateGame(creator, gameName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SchinkZeShips.Core.SchinkZeShipsReference.Game SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.EndCreateGame(System.IAsyncResult result) {
            return base.Channel.EndCreateGame(result);
        }
        
        private System.IAsyncResult OnBeginCreateGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SchinkZeShips.Core.SchinkZeShipsReference.Player creator = ((SchinkZeShips.Core.SchinkZeShipsReference.Player)(inValues[0]));
            string gameName = ((string)(inValues[1]));
            return ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).BeginCreateGame(creator, gameName, callback, asyncState);
        }
        
        private object[] OnEndCreateGame(System.IAsyncResult result) {
            SchinkZeShips.Core.SchinkZeShipsReference.Game retVal = ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).EndCreateGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateGameCompleted(object state) {
            if ((this.CreateGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateGameCompleted(this, new CreateGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateGameAsync(SchinkZeShips.Core.SchinkZeShipsReference.Player creator, string gameName) {
            this.CreateGameAsync(creator, gameName, null);
        }
        
        public void CreateGameAsync(SchinkZeShips.Core.SchinkZeShipsReference.Player creator, string gameName, object userState) {
            if ((this.onBeginCreateGameDelegate == null)) {
                this.onBeginCreateGameDelegate = new BeginOperationDelegate(this.OnBeginCreateGame);
            }
            if ((this.onEndCreateGameDelegate == null)) {
                this.onEndCreateGameDelegate = new EndOperationDelegate(this.OnEndCreateGame);
            }
            if ((this.onCreateGameCompletedDelegate == null)) {
                this.onCreateGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateGameCompleted);
            }
            base.InvokeAsync(this.onBeginCreateGameDelegate, new object[] {
                        creator,
                        gameName}, this.onEndCreateGameDelegate, this.onCreateGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.BeginGetCurrentGame(string playerId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentGame(playerId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SchinkZeShips.Core.SchinkZeShipsReference.Game SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.EndGetCurrentGame(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentGame(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string playerId = ((string)(inValues[0]));
            return ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).BeginGetCurrentGame(playerId, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentGame(System.IAsyncResult result) {
            SchinkZeShips.Core.SchinkZeShipsReference.Game retVal = ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).EndGetCurrentGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentGameCompleted(object state) {
            if ((this.GetCurrentGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentGameCompleted(this, new GetCurrentGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentGameAsync(string playerId) {
            this.GetCurrentGameAsync(playerId, null);
        }
        
        public void GetCurrentGameAsync(string playerId, object userState) {
            if ((this.onBeginGetCurrentGameDelegate == null)) {
                this.onBeginGetCurrentGameDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentGame);
            }
            if ((this.onEndGetCurrentGameDelegate == null)) {
                this.onEndGetCurrentGameDelegate = new EndOperationDelegate(this.OnEndGetCurrentGame);
            }
            if ((this.onGetCurrentGameCompletedDelegate == null)) {
                this.onGetCurrentGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentGameCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentGameDelegate, new object[] {
                        playerId}, this.onEndGetCurrentGameDelegate, this.onGetCurrentGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.BeginJoinGame(string gameIdToJoin, SchinkZeShips.Core.SchinkZeShipsReference.Player player, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginJoinGame(gameIdToJoin, player, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.EndJoinGame(System.IAsyncResult result) {
            base.Channel.EndJoinGame(result);
        }
        
        private System.IAsyncResult OnBeginJoinGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string gameIdToJoin = ((string)(inValues[0]));
            SchinkZeShips.Core.SchinkZeShipsReference.Player player = ((SchinkZeShips.Core.SchinkZeShipsReference.Player)(inValues[1]));
            return ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).BeginJoinGame(gameIdToJoin, player, callback, asyncState);
        }
        
        private object[] OnEndJoinGame(System.IAsyncResult result) {
            ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).EndJoinGame(result);
            return null;
        }
        
        private void OnJoinGameCompleted(object state) {
            if ((this.JoinGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.JoinGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void JoinGameAsync(string gameIdToJoin, SchinkZeShips.Core.SchinkZeShipsReference.Player player) {
            this.JoinGameAsync(gameIdToJoin, player, null);
        }
        
        public void JoinGameAsync(string gameIdToJoin, SchinkZeShips.Core.SchinkZeShipsReference.Player player, object userState) {
            if ((this.onBeginJoinGameDelegate == null)) {
                this.onBeginJoinGameDelegate = new BeginOperationDelegate(this.OnBeginJoinGame);
            }
            if ((this.onEndJoinGameDelegate == null)) {
                this.onEndJoinGameDelegate = new EndOperationDelegate(this.OnEndJoinGame);
            }
            if ((this.onJoinGameCompletedDelegate == null)) {
                this.onJoinGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnJoinGameCompleted);
            }
            base.InvokeAsync(this.onBeginJoinGameDelegate, new object[] {
                        gameIdToJoin,
                        player}, this.onEndJoinGameDelegate, this.onJoinGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.BeginRemoveFromGame(string gameId, string playerId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveFromGame(gameId, playerId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.EndRemoveFromGame(System.IAsyncResult result) {
            base.Channel.EndRemoveFromGame(result);
        }
        
        private System.IAsyncResult OnBeginRemoveFromGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string gameId = ((string)(inValues[0]));
            string playerId = ((string)(inValues[1]));
            return ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).BeginRemoveFromGame(gameId, playerId, callback, asyncState);
        }
        
        private object[] OnEndRemoveFromGame(System.IAsyncResult result) {
            ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).EndRemoveFromGame(result);
            return null;
        }
        
        private void OnRemoveFromGameCompleted(object state) {
            if ((this.RemoveFromGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveFromGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveFromGameAsync(string gameId, string playerId) {
            this.RemoveFromGameAsync(gameId, playerId, null);
        }
        
        public void RemoveFromGameAsync(string gameId, string playerId, object userState) {
            if ((this.onBeginRemoveFromGameDelegate == null)) {
                this.onBeginRemoveFromGameDelegate = new BeginOperationDelegate(this.OnBeginRemoveFromGame);
            }
            if ((this.onEndRemoveFromGameDelegate == null)) {
                this.onEndRemoveFromGameDelegate = new EndOperationDelegate(this.OnEndRemoveFromGame);
            }
            if ((this.onRemoveFromGameCompletedDelegate == null)) {
                this.onRemoveFromGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveFromGameCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveFromGameDelegate, new object[] {
                        gameId,
                        playerId}, this.onEndRemoveFromGameDelegate, this.onRemoveFromGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.BeginUpdateGameState(string gameId, SchinkZeShips.Core.SchinkZeShipsReference.GameState gameState, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateGameState(gameId, gameState, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips.EndUpdateGameState(System.IAsyncResult result) {
            base.Channel.EndUpdateGameState(result);
        }
        
        private System.IAsyncResult OnBeginUpdateGameState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string gameId = ((string)(inValues[0]));
            SchinkZeShips.Core.SchinkZeShipsReference.GameState gameState = ((SchinkZeShips.Core.SchinkZeShipsReference.GameState)(inValues[1]));
            return ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).BeginUpdateGameState(gameId, gameState, callback, asyncState);
        }
        
        private object[] OnEndUpdateGameState(System.IAsyncResult result) {
            ((SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips)(this)).EndUpdateGameState(result);
            return null;
        }
        
        private void OnUpdateGameStateCompleted(object state) {
            if ((this.UpdateGameStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateGameStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateGameStateAsync(string gameId, SchinkZeShips.Core.SchinkZeShipsReference.GameState gameState) {
            this.UpdateGameStateAsync(gameId, gameState, null);
        }
        
        public void UpdateGameStateAsync(string gameId, SchinkZeShips.Core.SchinkZeShipsReference.GameState gameState, object userState) {
            if ((this.onBeginUpdateGameStateDelegate == null)) {
                this.onBeginUpdateGameStateDelegate = new BeginOperationDelegate(this.OnBeginUpdateGameState);
            }
            if ((this.onEndUpdateGameStateDelegate == null)) {
                this.onEndUpdateGameStateDelegate = new EndOperationDelegate(this.OnEndUpdateGameState);
            }
            if ((this.onUpdateGameStateCompletedDelegate == null)) {
                this.onUpdateGameStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateGameStateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateGameStateDelegate, new object[] {
                        gameId,
                        gameState}, this.onEndUpdateGameStateDelegate, this.onUpdateGameStateCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips CreateChannel() {
            return new SchinkZeShipsClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISchinkZeShips)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_ISchinkZeShips)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISchinkZeShips)) {
                return new System.ServiceModel.EndpointAddress("http://schinkzeships.azurewebsites.net/SchinkZeShips.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_ISchinkZeShips)) {
                return new System.ServiceModel.EndpointAddress("https://schinkzeships.azurewebsites.net/SchinkZeShips.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private class SchinkZeShipsClientChannel : ChannelBase<SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips>, SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips {
            
            public SchinkZeShipsClientChannel(System.ServiceModel.ClientBase<SchinkZeShips.Core.SchinkZeShipsReference.ISchinkZeShips> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllOpenGames(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllOpenGames", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game> EndGetAllOpenGames(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game> _result = ((System.Collections.Generic.List<SchinkZeShips.Core.SchinkZeShipsReference.Game>)(base.EndInvoke("GetAllOpenGames", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateGame(SchinkZeShips.Core.SchinkZeShipsReference.Player creator, string gameName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = creator;
                _args[1] = gameName;
                System.IAsyncResult _result = base.BeginInvoke("CreateGame", _args, callback, asyncState);
                return _result;
            }
            
            public SchinkZeShips.Core.SchinkZeShipsReference.Game EndCreateGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                SchinkZeShips.Core.SchinkZeShipsReference.Game _result = ((SchinkZeShips.Core.SchinkZeShipsReference.Game)(base.EndInvoke("CreateGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentGame(string playerId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = playerId;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentGame", _args, callback, asyncState);
                return _result;
            }
            
            public SchinkZeShips.Core.SchinkZeShipsReference.Game EndGetCurrentGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                SchinkZeShips.Core.SchinkZeShipsReference.Game _result = ((SchinkZeShips.Core.SchinkZeShipsReference.Game)(base.EndInvoke("GetCurrentGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginJoinGame(string gameIdToJoin, SchinkZeShips.Core.SchinkZeShipsReference.Player player, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameIdToJoin;
                _args[1] = player;
                System.IAsyncResult _result = base.BeginInvoke("JoinGame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndJoinGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("JoinGame", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveFromGame(string gameId, string playerId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameId;
                _args[1] = playerId;
                System.IAsyncResult _result = base.BeginInvoke("RemoveFromGame", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveFromGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveFromGame", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateGameState(string gameId, SchinkZeShips.Core.SchinkZeShipsReference.GameState gameState, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameId;
                _args[1] = gameState;
                System.IAsyncResult _result = base.BeginInvoke("UpdateGameState", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateGameState(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateGameState", _args, result);
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ISchinkZeShips,
            
            BasicHttpsBinding_ISchinkZeShips,
        }
    }
}
